@page "/"
@*@inject Portfolio.BlazorWasm.ProjectApiService projectApi*@
@using Microsoft.Extensions.Configuration
@using Portfolio.Shared.ViewModels
@using Portfolio.Shared
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@inject ProjectApiService api
@inject IConfiguration config
@inject IAccessTokenProvider TokenProvider


@*<head>
        <meta name="viewport" content="width=device-width" />
        <title>Create New Project</title>
    </head>*@
<header>
    <h1 class="page-title">My Personal  Projects</h1>
    <br />
</header>
<body>
    @*<h5 class="bg-primary text-white text-center m-2 p-2">Create a Project</h5>*@
    <div class="m-2">
        <div asp-validation-summary="All"></div>
        <div class="form-group">
            <label asp-for="Title">Project Title:</label>
            <input @bind-value="newProjectName" class="form-control" />
        </div>
        <div class="form-group">
            <label asp-for="Body">Requirements: </label>
            <input @bind-value="newProjectRequirements" class="form-control" rows="4">
        </div>
        <div class="form-group">
            <label asp-for="Body">Design: </label>
            <input @bind-value="newProjectDesign" class="form-control" rows="4">
        </div>
        <div class="form-group">
            <label asp-for="Body">Completion Date: </label>
            <input @bind-value="newProjectCompletionDate" type="date" />
        </div>
        <div>
        </div>
        <button @onclick="addProject" class="btn btn-primary">Add Project</button>
    </div>
</body>






<hr />
<h3>List of Projects</h3>
<ListOfProjects />
@*<ul>
        @foreach (var p in projects)
        {
    <li>
        <a href="./project/projectdetails/@p.Slug"> @p.Title</a>
        <button @onclick="(() => removeProject(p)) " class="btn btn-primary">Remove </button>
    </li>}
    </ul>*@





@code { private string newProjectName;
    private string newProjectRequirements;
    private string newProjectDesign;
    private DateTime newProjectCompletionDate;



    private IEnumerable<ProjectViewModel> projects = new List<ProjectViewModel>();
    private IEnumerable<Project> project = new List<Project>();


    protected override async Task OnInitializedAsync()
    {
        //var authState = await authStateProvider.GetAuthenticationStateAsync();
        //var roles = from c in authState.User.Claims
        //            where c.Type == "https://schemas.dev-f6kthe8k.com/roles"
        //            select c.Value;
        //isAdmin = roles.Any(r => r.Contains("Admin"));

        //using (var requestMessage = new HttpRequestMessage(HttpMethod.Post, "post"))
        //{
        //    var tokenResult = await TokenProvider.RequestAccessToken();

        //    if (tokenResult.TryGetToken(out var token))
        //    {
        //        requestMessage.Headers.Authorization =
        //          new AuthenticationHeaderValue("Bearer", token.Value);
        //        var response = await api.SendAsync(requestMessage);
        //        quiz = await response.Content.ReadFromJsonAsync<List<QuizItem>>();
        //    }

        //}
        await RefreshProjectsAsync();
    }

    private async Task addProject()
    {
        var project = new ProjectViewModel
        {
            Title = newProjectName,
            Requirements = newProjectRequirements,
            Design = newProjectDesign,
            CompletionDate = newProjectCompletionDate
        };
        try
        {
            await api.AddProjectAsync(project);
            await RefreshProjectsAsync();
        }
        catch (Exception e)
        {
        }
        await RefreshProjectsAsync();
    }

    private async Task removeProject(ProjectViewModel project)
    {
        await api.RemoveProjectAsync(project);
        await RefreshProjectsAsync();
    }





    private async Task RefreshProjectsAsync()
    {
        projects = await api.GetProjectsAsync();
    }
}