@page "/project/projectdetails/edit/{Slug}"
@attribute [Authorize]
@inject ProjectApiService api
@inject IAccessTokenProvider TokenProvider
@using Portfolio.Shared.ViewModels
@using Portfolio.Shared
@using Markdig.SyntaxHighlighting
@using Markdig
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers



<h3> @projectName</h3>

<div class="form-group">
    <label asp-for="Title">Project Title:</label>
    <input @bind-value="@projectName" class="form-control" />
</div>
<div class="form-group">
    <label asp-for="Body">Requirements: </label>
    <textarea @bind=projectRequirements class="form-control" rows="4">@projectRequirements</textarea>
</div>
<div class="form-group">
    <label asp-for="Body">Design: </label>
    <input @bind-value="@projectDesign" class="form-control" rows="4">
</div>
<div class="form-group">
    <label asp-for="Body">Completion Date: </label>
    <input @bind-value="projectCompletionDate" type="date" />
</div>
<button @onclick="updateProject">save</button>
<div>
    <div class="category">
        <div>Language</div>
        <div><input @bind-value="newLanguage" /><button @onclick="assignLanguage">Add</button></div>
        <ListOfLanguages SelectedProject="@SelectedProject" />
    </div>
    <div class="category">
        <div>Platform</div>
        <div><input @bind-value="newPlatform" /><button @onclick="assignPlatform">Add</button></div>
        <ListOfPlatforms SelectedProject="@SelectedProject" />
    </div>
    <div class="category">
        <div>Technology</div>
        <div><input @bind-value="newTechnology" /><button @onclick="assignTechnology">Add</button></div>
        <ListOfTechnologies SelectedProject="@SelectedProject" />
    </div>

</div>
<MarkdownView Content="@htmlProjectRequirements" />


@code { [Parameter]
        public int ProjectId { get; set; }
        [Parameter]
        public string Slug { get; set; }
    public int Id { get; set; }

    string newLanguage;
    string newPlatform;
    string newTechnology;

    private string projectName;
    private string projectRequirements;
    private string htmlProjectRequirements;
    private string projectDesign;
    private DateTime projectCompletionDate;

    public ProjectViewModel SelectedProject { get; set; } = new ProjectViewModel();
    public Project project { get; set; } = new Project();


    //protected override async Task OnInitializedAsync()
    //{
    //    using (var requestMessage = new HttpRequestMessage(HttpMethod.Get, "quiz"))
    //    {
    //        var tokenResult = await TokenProvider.RequestAccessToken();

    //        if (tokenResult.TryGetToken(out var token))
    //        {
    //            requestMessage.Headers.Authorization =
    //              new AuthenticationHeaderValue("Bearer", token.Value);
    //            var response = await Http.SendAsync(requestMessage);
    //            quiz = await response.Content.ReadFromJsonAsync<List<QuizItem>>();
    //        }
    //    }
    //}

    protected override async Task OnInitializedAsync()
    {
        if (Slug == null)
            return;
        SelectedProject = await api.GetProjectFromSlug(Slug);

        projectName = SelectedProject.Title;
        projectRequirements = SelectedProject.Requirements;
        htmlProjectRequirements = Markdig.Markdown.ToHtml(projectRequirements, new MarkdownPipelineBuilder()
       .UseAdvancedExtensions()
       .UseSyntaxHighlighting()
       .Build()); ;
        projectDesign = SelectedProject.Design;
        projectCompletionDate = SelectedProject.CompletionDate;
    }

    private async Task updateProject()
    {
        var project = new ProjectViewModel
        {
            Id = SelectedProject.Id,
            Title = projectName,
            Requirements = projectRequirements,
            Design = projectDesign,
            CompletionDate = projectCompletionDate,
        };

        try
        {
            await api.SaveProjectAsync(project);
        }
        catch (Exception e)
        {
        }

        await OnInitializedAsync();
    }


    private async Task assignLanguage()
    {
        var assignBody = new AssignRequest
        {
            CategoryType = Portfolio.Shared.Project.LanguageCategory,
            Name = newLanguage,
            ProjectId = SelectedProject.Id,
        };
        await api.AssignAsync(assignBody);
        newLanguage = "";
        await OnInitializedAsync();
    }

    private async Task assignPlatform()
    {
        var assignBody = new AssignRequest
        {
            CategoryType = Portfolio.Shared.Project.PlatformCategory,
            Name = newPlatform,
            ProjectId = SelectedProject.Id,
        };
        await api.AssignAsync(assignBody);
        newPlatform = "";
        await OnInitializedAsync();
    }

    private async Task assignTechnology()
    {
        var assignBody = new AssignRequest
        {
            CategoryType = Portfolio.Shared.Project.TechnologyCategory,
            Name = newTechnology,
            ProjectId = SelectedProject.Id,
        };
        await api.AssignAsync(assignBody);
        newTechnology = "";
        await OnInitializedAsync();
    }


}
