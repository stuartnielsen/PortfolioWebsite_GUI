@page "/project/projectdetails/{ProjectId:int}"
@inject HttpClient http
@using Portfolio.Shared.ViewModels
@*@inject Portfolio.BlazorWasm.ProjectApiService projectApi*@
@using Portfolio.Shared
@*@using Portfolio.BlazorWasm*@ 

<h3>ProjectDetails @ProjectId</h3>

<div class="form-group">
    <label asp-for="Title">Project Title:</label>
    <input @bind-value="@projectName" class="form-control" />
</div>
<div class="form-group">
    <label asp-for="Body">Requirements: </label>
    <input @bind-value="@projectRequirements" class="form-control" rows="4">
</div>
<div class="form-group">
    <label asp-for="Body">Design: </label>
    <input @bind-value="@projectDesign" class="form-control" rows="4">
</div>
<div class="form-group">
    <label asp-for="Body">Completion Date: </label>
    <input @bind-value="projectCompletionDate" type="date" />
</div>
<button @onclick="updateProject">save</button>
<div>
    <div>Language</div>
    <div><input @bind-value="newLanguage" /><button @onclick="assignLanguage">Add</button></div>
    <ul>
        @foreach (var lang in SelectedProject.Languages)
        {
            <li><a href="langauges/@lang.Id">@lang.Name</a></li>
        }
    </ul>
</div>


@code { [Parameter]
    public int ProjectId { get; set; }
    public int Id { get; set; }
    string newLanguage;

    private string projectName;
    private string projectRequirements;
    private string projectDesign;
    private DateTime projectCompletionDate;

    public ProjectViewModel SelectedProject { get; set; } = new ProjectViewModel();
    public Project project { get; set; } = new Project();
    //public ProjectApiService ProjectApi = new ProjectApiService();


    protected override async Task OnInitializedAsync()
    {
        if (ProjectId == 0)
            return;
        var projects = (await http.GetFromJsonAsync<IEnumerable<ProjectViewModel>>("/api/project/"));
        SelectedProject = projects.FirstOrDefault(p => p.Id == ProjectId);

        projectName = SelectedProject.Title;
        projectRequirements = SelectedProject.Requirements;
        projectDesign = SelectedProject.Design;
        projectCompletionDate = SelectedProject.CompletionDate;
    }

    private async Task updateProject()
    {
        var project = new Project
        {
            Id = ProjectId,
            Title = projectName,
            Requirements = projectRequirements,
            Design = projectDesign,
            CompletionDate = projectCompletionDate
        };
        try
        {
            var response = await http.PostAsJsonAsync("/api/project/update", project);
        }
        catch (Exception e)
        {
        }
    }

    //async Task refreshAsync() => SelectedProject = await projectApi.GetProjectByIDAsync(Id);

    private async Task assignLanguage()
    {
        //await projectApi.AssignAsync(Portfolio.Shared.Project.LanguageCategory, SelectedProject.Id, newLanguage);
        //await refreshAsync();
        //throw new NotImplementedException();
        var assignBody = new AssignRequest
        {
            CategoryType = Portfolio.Shared.Project.LanguageCategory,
            Name = newLanguage,
            ProjectId = SelectedProject.Id,
        };
        await http.PostAsJsonAsync("api/project/assign/", assignBody);
    }
}
