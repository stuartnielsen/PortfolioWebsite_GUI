@page "/project/projectdetails/{Slug}"
@inject HttpClient http
@using Portfolio.Shared.ViewModels
@using Portfolio.Shared
@using Markdig.SyntaxHighlighting
<body>
    <content class="main-article">
        <div class="project-header">
            <h3> @projectName</h3>
            @projectCompletionDate
            <a href="project/projectdetails/edit/@Slug">edit</a>
        </div>

        
        <div>
            <MarkdownView Content="@projectRequirements" />
            <MarkdownView Content="@projectDesign" />
        </div>

        <hr />
        <div >
            <div class="category">
                <div>Language</div>
                <ListOfLanguages SelectedProject="@SelectedProject" />
            </div>

            <div class="category">
                <div>Platform</div>
                <ListOfPlatforms SelectedProject="@SelectedProject" />
            </div>

            <div class="category">
                <div>Technology</div>
                <ListOfTechnologies SelectedProject="@SelectedProject" />
            </div>
        </div>
    </content>
</body>

@code { [Parameter]
    public int ProjectId { get; set; }
    [Parameter]
    public string Slug { get; set; }
    public int Id { get; set; }

    string newLanguage;
    string newPlatform;
    string newTechnology;

    private string projectName;
    private string projectRequirements;
    private string projectDesign;
    private DateTime projectCompletionDate;

    public ProjectViewModel SelectedProject { get; set; } = new ProjectViewModel();
    public Project project { get; set; } = new Project();


    protected override async Task OnInitializedAsync()
    {
        if (Slug == null)
            return;
        SelectedProject = (await http.GetFromJsonAsync<ProjectViewModel>($"/api/project/projectdetails/{Slug}"));

        projectName = SelectedProject.Title;
        projectRequirements = SelectedProject.Requirements;
        projectDesign = SelectedProject.Design;
        projectCompletionDate = SelectedProject.CompletionDate;
    }

    private async Task updateProject()
    {
        var project = new ProjectViewModel
        {
            Id = SelectedProject.Id,
            Title = projectName,
            Requirements = projectRequirements,
            Design = projectDesign,
            CompletionDate = projectCompletionDate,
        };
        try
        {
            var response = await http.PostAsJsonAsync("/api/project/update", project);
        }
        catch (Exception e)
        {
        }
    }


    private async Task assignLanguage()
    {
        var assignBody = new AssignRequest
        {
            CategoryType = Portfolio.Shared.Project.LanguageCategory,
            Name = newLanguage,
            ProjectId = SelectedProject.Id,
        };
        await http.PostAsJsonAsync("api/project/assign/", assignBody);
        newLanguage = "";
        await OnInitializedAsync();
    }

    private async Task assignPlatform()
    {
        var assignBody = new AssignRequest
        {
            CategoryType = Portfolio.Shared.Project.PlatformCategory,
            Name = newPlatform,
            ProjectId = SelectedProject.Id,
        };
        await http.PostAsJsonAsync("api/project/assign/", assignBody);
        newPlatform = "";
        await OnInitializedAsync();
    }

    private async Task assignTechnology()
    {
        var assignBody = new AssignRequest
        {
            CategoryType = Portfolio.Shared.Project.TechnologyCategory,
            Name = newTechnology,
            ProjectId = SelectedProject.Id,
        };
        await http.PostAsJsonAsync("api/project/assign/", assignBody);
        newTechnology = "";
        await OnInitializedAsync();
    }
    

}
